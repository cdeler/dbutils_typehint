from collections import namedtuple
import dbutils_typehint.fs as fs
import dbutils_typehint.secrets as secrets

class NotebookExit(Exception):
    """Raised by dbutils.notebook.exit() to return a value from Notebook execution."""

class JobsHandler:
    def help(self, method_name=""): ...

class TaskValuesHandler:
    def get(self, taskKey, key, default=None, debugValue=None): ...
    def set(self, key, value): ...
    def help(self, method_name=""): ...

class NotebookHandler:
    def help(self, method_name=""): ...
    def exit(self, value):  ...
    def run(self, path, timeout_seconds, arguments={}, __databricks_internal_cluster_spec=None): ...

class WidgetsHandlerImpl:
    def help(self, method_name=""): ...
    def get(self, name): ...
    def getArgument(self, name, defaultValue=None): ...
    def text(self, name, defaultValue, label=None): ...
    def dropdown(self, name, defaultValue, choices, label=None): ...
    def combobox(self, name, defaultValue, choices, label=None): ...
    def multiselect(self, name, defaultValue, choices, label=None): ...
    def remove(self, name): ...
    def removeAll(self): ...

class CredentialsHandler:
    def help(self, method_name=None): ...
    def assumeRole(self, role): ...
    def showCurrentRole(self): ...
    def showRoles(self): ...
    def getCurrentCredentials(self): ...

class LibraryHandler:
    def help(self, method_name=None): ...
    def install(self, path): ...
    def installPyPI(self, project, version="", repo="", extras=""): ...
    def restartPython(self): ...
    def list(self): ...

class DataHandler:
    def help(self, method_name=None): ...
    def summarize(self, df, precise=False): ...


class DBUtils:
    """
    This class provides dbutils functionality for python notebooks, just like dbutils_v1.scala does
    it for Scala. For each of the calls here, we do two things: check whether the passed types are
    correct, and if so make a corresponding call to FSUtils object in Scala. For ls and mounts we do
    one extra thing - instead of returning result directly, we create a PythonSchemaSeq from it
    first. This is done to enable further operations with the result (e.g. call display function
    on it, or perform list operations on it)
    """

    @property
    def shell(self): ...

    @property
    def fs(self) -> fs.FS: ...
    @property
    def jobs(self) -> JobsHandler: ...
    @property
    def notebook(self) -> NotebookHandler: ...
    @property
    def secrets(self) -> secrets.Secrets: ...
    @property
    def widgets(self) -> WidgetsHandlerImpl: ...
    @property
    def library(self) -> LibraryHandler: ...
    @property
    def credentials(self) -> CredentialsHandler: ...
    @property
    def data(self) -> DataHandler: ...

    def help(self, method_name=""): ...
